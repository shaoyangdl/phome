package com.ph.phome

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import kotlinx.android.synthetic.main.app_item_layout.view.*

class AppListAdapter : RecyclerView.Adapter<AppListAdapter.AppViewHodler>() {

    private val appList = ArrayList<App>()
    var mOnAppClickListener: ((App) -> Unit)? = null
    var mOnDummyClickListener: (() -> Unit)? = null


    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AppViewHodler {
        val itemView = LayoutInflater.from(parent.context).inflate(viewType, null)
        return AppViewHodler(itemView)
    }

    override fun getItemCount(): Int {
        return appList.size
    }

    override fun onBindViewHolder(holder: AppViewHodler, position: Int) {
        holder.itemView.setOnFocusChangeListener { v, hasFocus ->
            if(hasFocus){
                ScaleAnimator.scaleUp(v)
            }else {
                ScaleAnimator.scaleDown(v)
            }
        }
        val current = appList[position]
        if(current !is DummyApp){
            holder.itemView.icon?.setImageDrawable(current.icon)
            holder.itemView.name?.text = current.appName
        }
        holder.itemView.setOnClickListener {
            val app = appList[position]
            when(app){
                is DummyApp ->{
                    mOnDummyClickListener?.invoke()
                }
                else ->{
                    mOnAppClickListener?.invoke(app)
                }
            }
        }

    }

    override fun getItemViewType(position: Int): Int {
        if(appList[position] is DummyApp){
            return R.layout.dummy_item_layout
        }
        return R.layout.app_item_layout
    }

    fun submitAppList(apps: List<App>, autoGenerateDummy: Boolean){
        appList.clear()
        appList.addAll(apps)
        if(autoGenerateDummy){
            appList.add(DummyApp())
        }
        notifyDataSetChanged()
    }

    inner class AppViewHodler(itemView: View) : RecyclerView.ViewHolder(itemView)
}